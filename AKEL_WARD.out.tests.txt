-- The CXX compiler identification is GNU 10.2.1
-- The C compiler identification is GNU 10.2.1
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
-- Looking for pthread_create in pthreads
-- Looking for pthread_create in pthreads - not found
-- Looking for pthread_create in pthread
-- Looking for pthread_create in pthread - found
-- Found Threads: TRUE  
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jube/Univ/theorie_des_langages/projet/corr/2022/sandbox-tests/build
Scanning dependencies of target testfa
[ 25%] Building CXX object CMakeFiles/testfa.dir/Automaton.cc.o
[ 50%] Building CXX object CMakeFiles/testfa.dir/testfa.cc.o
[ 75%] Building CXX object CMakeFiles/testfa.dir/googletest/googletest/src/gtest-all.cc.o
[100%] Linking CXX executable testfa
[100%] Built target testfa
==612298== Memcheck, a memory error detector
==612298== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==612298== Using Valgrind-3.16.1 and LibVEX; rerun with -h for copyright info
==612298== Command: ./testfa
==612298== 
[==========] Running 102 tests from 27 test suites.
[----------] Global test environment set-up.
[----------] 1 test from AutomatonExampleTest
[ RUN      ] AutomatonExampleTest.isValid
[       OK ] AutomatonExampleTest.isValid (3 ms)
[----------] 1 test from AutomatonExampleTest (5 ms total)

[----------] 3 tests from AutomatonAddSymbolTest
[ RUN      ] AutomatonAddSymbolTest.addSymbol
[       OK ] AutomatonAddSymbolTest.addSymbol (4 ms)
[ RUN      ] AutomatonAddSymbolTest.AddSymbolEpsilon
[       OK ] AutomatonAddSymbolTest.AddSymbolEpsilon (0 ms)
[ RUN      ] AutomatonAddSymbolTest.AddSymbolNotPrintable
[       OK ] AutomatonAddSymbolTest.AddSymbolNotPrintable (0 ms)
[----------] 3 tests from AutomatonAddSymbolTest (5 ms total)

[----------] 2 tests from AutomatonHasSymbolTest
[ RUN      ] AutomatonHasSymbolTest.hasSymbol
[       OK ] AutomatonHasSymbolTest.hasSymbol (1 ms)
[ RUN      ] AutomatonHasSymbolTest.HasNotSymbolC
[       OK ] AutomatonHasSymbolTest.HasNotSymbolC (0 ms)
[----------] 2 tests from AutomatonHasSymbolTest (1 ms total)

[----------] 3 tests from AutomatonRemoveSymbolTest
[ RUN      ] AutomatonRemoveSymbolTest.removeSymbol
[       OK ] AutomatonRemoveSymbolTest.removeSymbol (4 ms)
[ RUN      ] AutomatonRemoveSymbolTest.removeSymbol2
[       OK ] AutomatonRemoveSymbolTest.removeSymbol2 (1 ms)
[ RUN      ] AutomatonRemoveSymbolTest.removeSymbol3
[       OK ] AutomatonRemoveSymbolTest.removeSymbol3 (1 ms)
[----------] 3 tests from AutomatonRemoveSymbolTest (6 ms total)

[----------] 4 tests from AutomatonCountSymbol
[ RUN      ] AutomatonCountSymbol.CountSymbol0
[       OK ] AutomatonCountSymbol.CountSymbol0 (0 ms)
[ RUN      ] AutomatonCountSymbol.CountSymbol1
[       OK ] AutomatonCountSymbol.CountSymbol1 (0 ms)
[ RUN      ] AutomatonCountSymbol.CountSymbol3
[       OK ] AutomatonCountSymbol.CountSymbol3 (0 ms)
[ RUN      ] AutomatonCountSymbol.CountSymbol4
[       OK ] AutomatonCountSymbol.CountSymbol4 (1 ms)
[----------] 4 tests from AutomatonCountSymbol (3 ms total)

[----------] 5 tests from AutomatonAddStateTest
[ RUN      ] AutomatonAddStateTest.addState1
[       OK ] AutomatonAddStateTest.addState1 (1 ms)
[ RUN      ] AutomatonAddStateTest.addStateMoins1
[       OK ] AutomatonAddStateTest.addStateMoins1 (0 ms)
[ RUN      ] AutomatonAddStateTest.addState0
[       OK ] AutomatonAddStateTest.addState0 (0 ms)
[ RUN      ] AutomatonAddStateTest.addStateDoublons1
[       OK ] AutomatonAddStateTest.addStateDoublons1 (1 ms)
[ RUN      ] AutomatonAddStateTest.addStateDoublons2
[       OK ] AutomatonAddStateTest.addStateDoublons2 (1 ms)
[----------] 5 tests from AutomatonAddStateTest (4 ms total)

[----------] 4 tests from AutomatonRemoveStateTest
[ RUN      ] AutomatonRemoveStateTest.RemoveStateExisting
[       OK ] AutomatonRemoveStateTest.RemoveStateExisting (0 ms)
[ RUN      ] AutomatonRemoveStateTest.RemoveStateNotExisting
[       OK ] AutomatonRemoveStateTest.RemoveStateNotExisting (0 ms)
[ RUN      ] AutomatonRemoveStateTest.RemoveStateExistingWithTransitions
[       OK ] AutomatonRemoveStateTest.RemoveStateExistingWithTransitions (6 ms)
[ RUN      ] AutomatonRemoveStateTest.RemoveStateExistingWithTransitions2
[       OK ] AutomatonRemoveStateTest.RemoveStateExistingWithTransitions2 (2 ms)
[----------] 4 tests from AutomatonRemoveStateTest (10 ms total)

[----------] 3 tests from AutomatonHasStateTest
[ RUN      ] AutomatonHasStateTest.HasState1
[       OK ] AutomatonHasStateTest.HasState1 (0 ms)
[ RUN      ] AutomatonHasStateTest.HasState0
[       OK ] AutomatonHasStateTest.HasState0 (0 ms)
[ RUN      ] AutomatonHasStateTest.HasNotState1
[       OK ] AutomatonHasStateTest.HasNotState1 (0 ms)
[----------] 3 tests from AutomatonHasStateTest (2 ms total)

[----------] 3 tests from AutomatonCountState
[ RUN      ] AutomatonCountState.CountState0
[       OK ] AutomatonCountState.CountState0 (0 ms)
[ RUN      ] AutomatonCountState.CountState1
[       OK ] AutomatonCountState.CountState1 (0 ms)
[ RUN      ] AutomatonCountState.CountState3
[       OK ] AutomatonCountState.CountState3 (0 ms)
[----------] 3 tests from AutomatonCountState (2 ms total)

[----------] 3 tests from AutomatonIsStateInitial
[ RUN      ] AutomatonIsStateInitial.setStateInitial
==612304== 
==612304== HEAP SUMMARY:
==612304==     in use at exit: 55,098 bytes in 674 blocks
==612304==   total heap usage: 2,917 allocs, 2,243 frees, 285,472 bytes allocated
==612304== 
==612304== LEAK SUMMARY:
==612304==    definitely lost: 0 bytes in 0 blocks
==612304==    indirectly lost: 0 bytes in 0 blocks
==612304==      possibly lost: 0 bytes in 0 blocks
==612304==    still reachable: 55,098 bytes in 674 blocks
==612304==         suppressed: 0 bytes in 0 blocks
==612304== Rerun with --leak-check=full to see details of leaked memory
==612304== 
==612304== For lists of detected and suppressed errors, rerun with: -s
==612304== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
/home/jube/Univ/theorie_des_langages/projet/corr/2022/sandbox-tests/testfa.cc:272: Failure
Death test: fa.isStateInitial(2)
    Result: failed to die.
 Error msg:
[  DEATH   ] 
==612305== 
==612305== HEAP SUMMARY:
==612305==     in use at exit: 55,594 bytes in 681 blocks
==612305==   total heap usage: 3,049 allocs, 2,368 frees, 311,191 bytes allocated
==612305== 
==612305== LEAK SUMMARY:
==612305==    definitely lost: 0 bytes in 0 blocks
==612305==    indirectly lost: 0 bytes in 0 blocks
==612305==      possibly lost: 0 bytes in 0 blocks
==612305==    still reachable: 55,594 bytes in 681 blocks
==612305==         suppressed: 0 bytes in 0 blocks
==612305== Rerun with --leak-check=full to see details of leaked memory
==612305== 
==612305== For lists of detected and suppressed errors, rerun with: -s
==612305== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
/home/jube/Univ/theorie_des_langages/projet/corr/2022/sandbox-tests/testfa.cc:273: Failure
Death test: fa.setStateInitial(2)
    Result: failed to die.
 Error msg:
[  DEATH   ] 
==612306== 
==612306== HEAP SUMMARY:
==612306==     in use at exit: 56,043 bytes in 684 blocks
==612306==   total heap usage: 3,179 allocs, 2,495 frees, 337,074 bytes allocated
==612306== 
==612306== LEAK SUMMARY:
==612306==    definitely lost: 0 bytes in 0 blocks
==612306==    indirectly lost: 0 bytes in 0 blocks
==612306==      possibly lost: 0 bytes in 0 blocks
==612306==    still reachable: 56,043 bytes in 684 blocks
==612306==         suppressed: 0 bytes in 0 blocks
==612306== Rerun with --leak-check=full to see details of leaked memory
==612306== 
==612306== For lists of detected and suppressed errors, rerun with: -s
==612306== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
/home/jube/Univ/theorie_des_langages/projet/corr/2022/sandbox-tests/testfa.cc:276: Failure
Death test: fa.isStateInitial(2)
    Result: failed to die.
 Error msg:
[  DEATH   ] 
[  FAILED  ] AutomatonIsStateInitial.setStateInitial (99 ms)
[ RUN      ] AutomatonIsStateInitial.IsStateInitialYes
[       OK ] AutomatonIsStateInitial.IsStateInitialYes (0 ms)
[ RUN      ] AutomatonIsStateInitial.IsStateInitialNot
[       OK ] AutomatonIsStateInitial.IsStateInitialNot (0 ms)
[----------] 3 tests from AutomatonIsStateInitial (101 ms total)

[----------] 3 tests from AutomatonIsStateFinal
[ RUN      ] AutomatonIsStateFinal.setStateFinal
==612307== 
==612307== HEAP SUMMARY:
==612307==     in use at exit: 56,517 bytes in 687 blocks
==612307==   total heap usage: 3,323 allocs, 2,636 frees, 366,427 bytes allocated
==612307== 
==612307== LEAK SUMMARY:
==612307==    definitely lost: 0 bytes in 0 blocks
==612307==    indirectly lost: 0 bytes in 0 blocks
==612307==      possibly lost: 0 bytes in 0 blocks
==612307==    still reachable: 56,517 bytes in 687 blocks
==612307==         suppressed: 0 bytes in 0 blocks
==612307== Rerun with --leak-check=full to see details of leaked memory
==612307== 
==612307== For lists of detected and suppressed errors, rerun with: -s
==612307== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
/home/jube/Univ/theorie_des_langages/projet/corr/2022/sandbox-tests/testfa.cc:304: Failure
Death test: fa.isStateFinal(2)
    Result: failed to die.
 Error msg:
[  DEATH   ] 
==612308== 
==612308== HEAP SUMMARY:
==612308==     in use at exit: 56,875 bytes in 691 blocks
==612308==   total heap usage: 3,452 allocs, 2,761 frees, 391,982 bytes allocated
==612308== 
==612308== LEAK SUMMARY:
==612308==    definitely lost: 0 bytes in 0 blocks
==612308==    indirectly lost: 0 bytes in 0 blocks
==612308==      possibly lost: 0 bytes in 0 blocks
==612308==    still reachable: 56,875 bytes in 691 blocks
==612308==         suppressed: 0 bytes in 0 blocks
==612308== Rerun with --leak-check=full to see details of leaked memory
==612308== 
==612308== For lists of detected and suppressed errors, rerun with: -s
==612308== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
/home/jube/Univ/theorie_des_langages/projet/corr/2022/sandbox-tests/testfa.cc:305: Failure
Death test: fa.setStateFinal(2)
    Result: failed to die.
 Error msg:
[  DEATH   ] 
==612309== 
==612309== HEAP SUMMARY:
==612309==     in use at exit: 57,235 bytes in 694 blocks
==612309==   total heap usage: 3,581 allocs, 2,887 frees, 417,664 bytes allocated
==612309== 
==612309== LEAK SUMMARY:
==612309==    definitely lost: 0 bytes in 0 blocks
==612309==    indirectly lost: 0 bytes in 0 blocks
==612309==      possibly lost: 0 bytes in 0 blocks
==612309==    still reachable: 57,235 bytes in 694 blocks
==612309==         suppressed: 0 bytes in 0 blocks
==612309== Rerun with --leak-check=full to see details of leaked memory
==612309== 
==612309== For lists of detected and suppressed errors, rerun with: -s
==612309== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
/home/jube/Univ/theorie_des_langages/projet/corr/2022/sandbox-tests/testfa.cc:308: Failure
Death test: fa.isStateFinal(2)
    Result: failed to die.
 Error msg:
[  DEATH   ] 
[  FAILED  ] AutomatonIsStateFinal.setStateFinal (45 ms)
[ RUN      ] AutomatonIsStateFinal.IsStateFinalNo
[       OK ] AutomatonIsStateFinal.IsStateFinalNo (0 ms)
[ RUN      ] AutomatonIsStateFinal.IsStateFinalYes
[       OK ] AutomatonIsStateFinal.IsStateFinalYes (0 ms)
[----------] 3 tests from AutomatonIsStateFinal (46 ms total)

[----------] 5 tests from AutomatonAddTransitionTest
[ RUN      ] AutomatonAddTransitionTest.AddTransitionSucceed
[       OK ] AutomatonAddTransitionTest.AddTransitionSucceed (1 ms)
[ RUN      ] AutomatonAddTransitionTest.AddTransitionFailedAlpha
[       OK ] AutomatonAddTransitionTest.AddTransitionFailedAlpha (1 ms)
[ RUN      ] AutomatonAddTransitionTest.AddTransitionFailedState
[       OK ] AutomatonAddTransitionTest.AddTransitionFailedState (1 ms)
[ RUN      ] AutomatonAddTransitionTest.AddTransitionFailedAlreadyAdded
[       OK ] AutomatonAddTransitionTest.AddTransitionFailedAlreadyAdded (1 ms)
[ RUN      ] AutomatonAddTransitionTest.AddEpsilonTransition
[       OK ] AutomatonAddTransitionTest.AddEpsilonTransition (1 ms)
[----------] 5 tests from AutomatonAddTransitionTest (5 ms total)

[----------] 5 tests from AutomatonRemoveTransitionTest
[ RUN      ] AutomatonRemoveTransitionTest.RemoveTransitionSucceed
[       OK ] AutomatonRemoveTransitionTest.RemoveTransitionSucceed (2 ms)
[ RUN      ] AutomatonRemoveTransitionTest.RemoveTransitionFailedSymbolRemove
[       OK ] AutomatonRemoveTransitionTest.RemoveTransitionFailedSymbolRemove (1 ms)
[ RUN      ] AutomatonRemoveTransitionTest.RemoveTransitionFailedSymbolAdd
[       OK ] AutomatonRemoveTransitionTest.RemoveTransitionFailedSymbolAdd (1 ms)
[ RUN      ] AutomatonRemoveTransitionTest.RemoveTransitionFailedState
[       OK ] AutomatonRemoveTransitionTest.RemoveTransitionFailedState (1 ms)
[ RUN      ] AutomatonRemoveTransitionTest.OneTransitionLeft
[       OK ] AutomatonRemoveTransitionTest.OneTransitionLeft (1 ms)
[----------] 5 tests from AutomatonRemoveTransitionTest (9 ms total)

[----------] 4 tests from AutomatonHasTransitionTest
[ RUN      ] AutomatonHasTransitionTest.HasTransitionSucceed
[       OK ] AutomatonHasTransitionTest.HasTransitionSucceed (1 ms)
[ RUN      ] AutomatonHasTransitionTest.HasTransitionFailedAlpha
[       OK ] AutomatonHasTransitionTest.HasTransitionFailedAlpha (1 ms)
[ RUN      ] AutomatonHasTransitionTest.HasTransitionFailedState
[       OK ] AutomatonHasTransitionTest.HasTransitionFailedState (1 ms)
[ RUN      ] AutomatonHasTransitionTest.HasTransitionFailedState2
[       OK ] AutomatonHasTransitionTest.HasTransitionFailedState2 (1 ms)
[----------] 4 tests from AutomatonHasTransitionTest (4 ms total)

[----------] 2 tests from AutomatonCountTransition
[ RUN      ] AutomatonCountTransition.CountTransition0
[       OK ] AutomatonCountTransition.CountTransition0 (0 ms)
[ RUN      ] AutomatonCountTransition.CountTransition1
[       OK ] AutomatonCountTransition.CountTransition1 (1 ms)
[----------] 2 tests from AutomatonCountTransition (1 ms total)

[----------] 2 tests from AutomatonCountTranstion
[ RUN      ] AutomatonCountTranstion.CountTransition3
[       OK ] AutomatonCountTranstion.CountTransition3 (1 ms)
[ RUN      ] AutomatonCountTranstion.CountTransition4
[       OK ] AutomatonCountTranstion.CountTransition4 (2 ms)
[----------] 2 tests from AutomatonCountTranstion (4 ms total)

[----------] 2 tests from AutomatonTestEpsilon
[ RUN      ] AutomatonTestEpsilon.hasEpsilonTransition
[       OK ] AutomatonTestEpsilon.hasEpsilonTransition (1 ms)
[ RUN      ] AutomatonTestEpsilon.hasEpsilonTransition2
[       OK ] AutomatonTestEpsilon.hasEpsilonTransition2 (1 ms)
[----------] 2 tests from AutomatonTestEpsilon (3 ms total)

[----------] 3 tests from AutomatonIsDeterministic
[ RUN      ] AutomatonIsDeterministic.IsDeterministic1
[       OK ] AutomatonIsDeterministic.IsDeterministic1 (2 ms)
[ RUN      ] AutomatonIsDeterministic.IsDeterministic2
[       OK ] AutomatonIsDeterministic.IsDeterministic2 (1 ms)
[ RUN      ] AutomatonIsDeterministic.IsDeterministic3
[       OK ] AutomatonIsDeterministic.IsDeterministic3 (1 ms)
[----------] 3 tests from AutomatonIsDeterministic (5 ms total)

[----------] 2 tests from AutomatonIsComplete
[ RUN      ] AutomatonIsComplete.IsCompleteFailed
[       OK ] AutomatonIsComplete.IsCompleteFailed (1 ms)
[ RUN      ] AutomatonIsComplete.IsCompleteSucceed
[       OK ] AutomatonIsComplete.IsCompleteSucceed (2 ms)
[----------] 2 tests from AutomatonIsComplete (4 ms total)

[----------] 2 tests from AutomatonCreateComplete
[ RUN      ] AutomatonCreateComplete.CreateCompleteAlreadyCompleted
[       OK ] AutomatonCreateComplete.CreateCompleteAlreadyCompleted (5 ms)
[ RUN      ] AutomatonCreateComplete.NotCreatingNewStateForBin
[       OK ] AutomatonCreateComplete.NotCreatingNewStateForBin (4 ms)
[----------] 2 tests from AutomatonCreateComplete (9 ms total)

[----------] 1 test from AutomatonCreateComplement
[ RUN      ] AutomatonCreateComplement.AlreadyCompleteAndDeterministic
[       OK ] AutomatonCreateComplement.AlreadyCompleteAndDeterministic (5 ms)
[----------] 1 test from AutomatonCreateComplement (5 ms total)

[----------] 3 tests from AutomatonCreateMirror
[ RUN      ] AutomatonCreateMirror.CreateMirrorAndIsCompleted
[       OK ] AutomatonCreateMirror.CreateMirrorAndIsCompleted (3 ms)
[ RUN      ] AutomatonCreateMirror.CreateMirrorNotCompleted
[       OK ] AutomatonCreateMirror.CreateMirrorNotCompleted (2 ms)
[ RUN      ] AutomatonCreateMirror.CreateMirrorInitialsAreFinalsTo
[       OK ] AutomatonCreateMirror.CreateMirrorInitialsAreFinalsTo (2 ms)
[----------] 3 tests from AutomatonCreateMirror (8 ms total)

[----------] 8 tests from AutomatonIsLanguageEmpty
[ RUN      ] AutomatonIsLanguageEmpty.IsLanguageEmptyNoInitialState
[       OK ] AutomatonIsLanguageEmpty.IsLanguageEmptyNoInitialState (1 ms)
[ RUN      ] AutomatonIsLanguageEmpty.IsLanguageEmptyNoFinalState
[       OK ] AutomatonIsLanguageEmpty.IsLanguageEmptyNoFinalState (1 ms)
[ RUN      ] AutomatonIsLanguageEmpty.IsLanguageEmptyTrue
[       OK ] AutomatonIsLanguageEmpty.IsLanguageEmptyTrue (3 ms)
[ RUN      ] AutomatonIsLanguageEmpty.IsLanguageEmptyFalse
[       OK ] AutomatonIsLanguageEmpty.IsLanguageEmptyFalse (1 ms)
[ RUN      ] AutomatonIsLanguageEmpty.IsLanguageEmptyFalseInitialStateIsFinal
[       OK ] AutomatonIsLanguageEmpty.IsLanguageEmptyFalseInitialStateIsFinal (1 ms)
[ RUN      ] AutomatonIsLanguageEmpty.IsLanguageEmptyFalseMultipleInitial
[       OK ] AutomatonIsLanguageEmpty.IsLanguageEmptyFalseMultipleInitial (1 ms)
[ RUN      ] AutomatonIsLanguageEmpty.IsLanguageEmptyWord
[       OK ] AutomatonIsLanguageEmpty.IsLanguageEmptyWord (1 ms)
[ RUN      ] AutomatonIsLanguageEmpty.NonDeterministicTest
[       OK ] AutomatonIsLanguageEmpty.NonDeterministicTest (10 ms)
[----------] 8 tests from AutomatonIsLanguageEmpty (24 ms total)

[----------] 5 tests from AutomatonRemoveNonAccessibleStates
[ RUN      ] AutomatonRemoveNonAccessibleStates.NoInitialState
[       OK ] AutomatonRemoveNonAccessibleStates.NoInitialState (4 ms)
[ RUN      ] AutomatonRemoveNonAccessibleStates.NonAccessibleOnlyState
[       OK ] AutomatonRemoveNonAccessibleStates.NonAccessibleOnlyState (2 ms)
[ RUN      ] AutomatonRemoveNonAccessibleStates.HasOnlyAccessibleState
[       OK ] AutomatonRemoveNonAccessibleStates.HasOnlyAccessibleState (1 ms)
[ RUN      ] AutomatonRemoveNonAccessibleStates.LastStateNonAccessible
[       OK ] AutomatonRemoveNonAccessibleStates.LastStateNonAccessible (2 ms)
[ RUN      ] AutomatonRemoveNonAccessibleStates.NonAccessibleEnChaine
[       OK ] AutomatonRemoveNonAccessibleStates.NonAccessibleEnChaine (2 ms)
[----------] 5 tests from AutomatonRemoveNonAccessibleStates (14 ms total)

[----------] 5 tests from AutomatonRemoveNonCoAccessibleStates
[ RUN      ] AutomatonRemoveNonCoAccessibleStates.NoFinalState
[       OK ] AutomatonRemoveNonCoAccessibleStates.NoFinalState (3 ms)
[ RUN      ] AutomatonRemoveNonCoAccessibleStates.HasOnlyCoAccessibleState
[       OK ] AutomatonRemoveNonCoAccessibleStates.HasOnlyCoAccessibleState (1 ms)
[ RUN      ] AutomatonRemoveNonCoAccessibleStates.FirstStateNonCoAccessible
[       OK ] AutomatonRemoveNonCoAccessibleStates.FirstStateNonCoAccessible (2 ms)
[ RUN      ] AutomatonRemoveNonCoAccessibleStates.NonCoAccessibleEnChaine
[       OK ] AutomatonRemoveNonCoAccessibleStates.NonCoAccessibleEnChaine (2 ms)
[ RUN      ] AutomatonRemoveNonCoAccessibleStates.NonCoAccessibleOnlyState
[       OK ] AutomatonRemoveNonCoAccessibleStates.NonCoAccessibleOnlyState (2 ms)
[----------] 5 tests from AutomatonRemoveNonCoAccessibleStates (12 ms total)

[----------] 10 tests from AutomatonCreateProduct
[ RUN      ] AutomatonCreateProduct.NonDeterministicAndSamesAutomatons
[       OK ] AutomatonCreateProduct.NonDeterministicAndSamesAutomatons (3 ms)
[ RUN      ] AutomatonCreateProduct.NonDeterministicAndSameAutomata
[       OK ] AutomatonCreateProduct.NonDeterministicAndSameAutomata (2 ms)
[ RUN      ] AutomatonCreateProduct.EmptyProduct
[       OK ] AutomatonCreateProduct.EmptyProduct (3 ms)
[ RUN      ] AutomatonCreateProduct.EmptyProductbutMatchEmptyWord
[       OK ] AutomatonCreateProduct.EmptyProductbutMatchEmptyWord (3 ms)
[ RUN      ] AutomatonCreateProduct.InitialsAreFinalsToo
[       OK ] AutomatonCreateProduct.InitialsAreFinalsToo (3 ms)
[ RUN      ] AutomatonCreateProduct.BasicExemple
[       OK ] AutomatonCreateProduct.BasicExemple (3 ms)
[ RUN      ] AutomatonCreateProduct.BasicExempleBis
[       OK ] AutomatonCreateProduct.BasicExempleBis (3 ms)
[ RUN      ] AutomatonCreateProduct.LoopOnExistingState
[       OK ] AutomatonCreateProduct.LoopOnExistingState (3 ms)
[ RUN      ] AutomatonCreateProduct.LHSLanguageIsEmpty
[       OK ] AutomatonCreateProduct.LHSLanguageIsEmpty (3 ms)
[ RUN      ] AutomatonCreateProduct.RHSLanguageIsEmpty
[       OK ] AutomatonCreateProduct.RHSLanguageIsEmpty (3 ms)
[----------] 10 tests from AutomatonCreateProduct (35 ms total)

[----------] 9 tests from HasEmptyIntersectionWith
[ RUN      ] HasEmptyIntersectionWith.NonDeterministicAndSamesAutomatons
[       OK ] HasEmptyIntersectionWith.NonDeterministicAndSamesAutomatons (2 ms)
[ RUN      ] HasEmptyIntersectionWith.NonDeterministicAndSameAutomata
[       OK ] HasEmptyIntersectionWith.NonDeterministicAndSameAutomata (1 ms)
[ RUN      ] HasEmptyIntersectionWith.EmptyProduct
[       OK ] HasEmptyIntersectionWith.EmptyProduct (2 ms)
[ RUN      ] HasEmptyIntersectionWith.InitialsAreFinalsToo
[       OK ] HasEmptyIntersectionWith.InitialsAreFinalsToo (2 ms)
[ RUN      ] HasEmptyIntersectionWith.BasicExemple
[       OK ] HasEmptyIntersectionWith.BasicExemple (2 ms)
[ RUN      ] HasEmptyIntersectionWith.BasicExempleBis
[       OK ] HasEmptyIntersectionWith.BasicExempleBis (2 ms)
[ RUN      ] HasEmptyIntersectionWith.LoopOnExistingState
[       OK ] HasEmptyIntersectionWith.LoopOnExistingState (2 ms)
[ RUN      ] HasEmptyIntersectionWith.LHSLanguageIsEmpty
[       OK ] HasEmptyIntersectionWith.LHSLanguageIsEmpty (2 ms)
[ RUN      ] HasEmptyIntersectionWith.RHSLanguageIsEmpty
[       OK ] HasEmptyIntersectionWith.RHSLanguageIsEmpty (2 ms)
[----------] 9 tests from HasEmptyIntersectionWith (22 ms total)

[----------] Global test environment tear-down
[==========] 102 tests from 27 test suites ran. (386 ms total)
[  PASSED  ] 100 tests.
[  FAILED  ] 2 tests, listed below:
[  FAILED  ] AutomatonIsStateInitial.setStateInitial
[  FAILED  ] AutomatonIsStateFinal.setStateFinal

 2 FAILED TESTS
==612298== 
==612298== HEAP SUMMARY:
==612298==     in use at exit: 0 bytes in 0 blocks
==612298==   total heap usage: 5,713 allocs, 5,713 frees, 619,971 bytes allocated
==612298== 
==612298== All heap blocks were freed -- no leaks are possible
==612298== 
==612298== For lists of detected and suppressed errors, rerun with: -s
==612298== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
